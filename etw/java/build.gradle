import org.apache.tools.ant.taskdefs.condition.Os

plugins {
  id("ai.java-conventions")
}

configurations {
  jni64 {
    transitive = false
  }
  jni32 {
    transitive = false
  }
}

def jniSrcDir = "src/main/jni"
sourceSets {
  main {
    java {
      srcDir jniSrcDir
    }
  }
}

base {
  archivesName = "applicationinsights-java-etw-provider"
}

logger.info "project ${project.path} prop: ai.etw.native.build=${System.properties['ai.etw.native.build']}"

def buildNative = System.properties['ai.etw.native.build'] != null && Os.isFamily(Os.FAMILY_WINDOWS)
dependencies {
  implementation("org.slf4j:slf4j-api")

  if (buildNative) {
    jni32 project(path: ":etw:native", configuration: "${System.properties['ai.etw.native.build']}X86RuntimeElements")
    jni64 project(path: ":etw:native", configuration: "${System.properties['ai.etw.native.build']}X86-64RuntimeElements")
  } else {
    logger.info "Skipping build of :etw:native. EtwAppender/EtwProvider will not work because library is missing"
  }

  testImplementation("org.junit.jupiter:junit-jupiter")
  testImplementation("org.assertj:assertj-core")
  testImplementation("org.mockito:mockito-core")
  testImplementation("org.apache.commons:commons-lang3:3.12.0")

  testCompileOnly("com.google.code.findbugs:jsr305")
}

// To rebuild naitive code with new headers, first run `gradlew :etw:java:classes -Pai.etw.native.generateHeaders` to generate new header, then update the method implementations.
// After that, :etw:java can be built again.
if (hasProperty("ai.etw.native.generateHeaders")) {
  def jniOutDir = "$rootDir/etw/native/src/main/headers"
  logger.quiet "New JNI headers will be generated to $jniOutDir"
  compileJava {
    options.compilerArgs.addAll(["-h", jniOutDir])
  }
}

if (buildNative) {
  tasks.register("processNativeResources", Copy) {
    def useReleaseBuild = System.properties["ai.etw.native.build"].equalsIgnoreCase("release")
    dependsOn project(":etw:native").tasks.named("assemble${useReleaseBuild ? 'Release' : 'Debug'}X86").get()
    dependsOn project(":etw:native").tasks.named("assemble${useReleaseBuild ? 'Release' : 'Debug'}X86-64").get()

    from configurations.jni32.files
    from configurations.jni64.files
    include "*.dll"
    into "${sourceSets.main.output.resourcesDir}"
  }
  tasks.named("processResources").configure {
    dependsOn "processNativeResources"
  }
}

tasks.named("test").configure {
  def testprops =
    project.properties.findAll {
      it.key.startsWith("ai.tests.")
    } +
      project.properties.findAll {
        it.key.startsWith("ai.etw.")
      } + ["skipWinNative": !buildNative]
  systemProperties testprops
}
