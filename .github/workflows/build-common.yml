name: Build (common)

on:
  workflow_call:
    inputs:
      no-build-cache:
        type: boolean
        required: false

env:
  # set this to <repo>:<branch/sha> to build and test with an unreleased
  # version of the azure-monitor-opentelemetry-autoconfigure dependency
  AZURE_MONITOR_OPENTELEMETRY_AUTOCONFIGURE_SNAPSHOT:

jobs:
  spotless:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK for running Gradle
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Spotless
        run: ./gradlew spotlessCheck ${{ inputs.no-build-cache && '--no-build-cache' || '' }}

  gradle-wrapper-validation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: gradle/actions/wrapper-validation@v4.4.0

  license-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK for running Gradle
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Build and install local azure-monitor-opentelemetry-autoconfigure dependency
        if: env.AZURE_MONITOR_OPENTELEMETRY_AUTOCONFIGURE_SNAPSHOT != ''
        run: ./.github/scripts/build-azure-monitor-dependency.sh

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Generate license report
        run: |
          # generateLicenseReport build caching appears to be broken so need to ignore build cache always
          ./gradlew generateLicenseReport --no-build-cache

      - name: Check licenses
        run: |
          # add any untracked folders that may have been added by generateLicenseReport
          git add licenses
          # there's always going to one line difference due to the timestamp included in the report
          if [[ $(git diff --cached --shortstat licenses) == " 1 file changed, 1 insertion(+), 1 deletion(-)" ]]
          then
            echo "Licenses are up-to-date."
          else
            echo "Licenses are not up-to-date, please run './gradlew generateLicenseReport' locally and commit."
            echo
            echo "$(git diff --cached --stat licenses)"
            echo
            echo "$(git diff --cached licenses)"
            exit 1
          fi

  assemble:
    # running (and uploading artifact) from windows since only that build includes etw
    runs-on: windows-2022
    steps:
      - name: Support long paths
        run: git config --system core.longpaths true

      - uses: actions/checkout@v4

      - name: Set up JDK for running Gradle
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Build and install local azure-monitor-opentelemetry-autoconfigure dependency
        if: env.AZURE_MONITOR_OPENTELEMETRY_AUTOCONFIGURE_SNAPSHOT != ''
        shell: bash
        run: ./.github/scripts/build-azure-monitor-dependency.sh

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Setup Visual Studio and Windows SDK environment
        shell: cmd
        run: |
          "%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath > vs.txt
          set /p VSPATH=<vs.txt
          echo APPINSIGHTS_VS_PATH=%VSPATH%>>%GITHUB_ENV%
          echo APPINSIGHTS_WIN10_SDK_PATH=C:\Program Files (x86)\Windows Kits\10>>%GITHUB_ENV%

      - name: Assemble
        # javadoc task fails sporadically fetching https://docs.oracle.com/javase/8/docs/api/
        run: >
          ./gradlew assemble
          "-Dai.etw.native.build=release"
          -x javadoc
          ${{ inputs.no-build-cache && '--no-build-cache' || '' }}

      - name: Upload snapshot
        uses: actions/upload-artifact@v4
        with:
          path: agent/agent/build/libs/applicationinsights-agent-*-SNAPSHOT.jar

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        test-java-version:
          - 8
        vm:
          - hotspot
          # TODO (trask) enable once profiler supports OpenJ9
          # - openj9
        os:
          - windows-2022
        num:
          - 1
          - 2
          - 3
          - 4
          - 5
      fail-fast: false
    steps:
      - name: Support long paths
        run: git config --system core.longpaths true
        if: matrix.os == 'windows-2022'

      - uses: actions/checkout@v4

      - id: setup-test-java
        name: Set up JDK ${{ matrix.test-java-version }}-${{ matrix.vm }} for running tests
        uses: actions/setup-java@v4
        with:
          distribution: ${{ matrix.vm == 'hotspot' && 'temurin' || 'adopt-openj9'}}
          java-version: ${{ matrix.test-java-version }}

      - name: Set up JDK for running Gradle
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Build and install local azure-monitor-opentelemetry-autoconfigure dependency
        if: env.AZURE_MONITOR_OPENTELEMETRY_AUTOCONFIGURE_SNAPSHOT != ''
        shell: bash
        run: ./.github/scripts/build-azure-monitor-dependency.sh

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Test
        # spotless is checked separately since it's a common source of failure
        # running in a loop 1..50 to identify flaky test behavior
        shell: bash
        run: |
          for i in {1..100}; do
            echo "=== Test run $i/100 ==="
            ./gradlew \
              test \
              --rerun-tasks \
              -PtestJavaVersion=${{ matrix.test-java-version }} \
              -PtestJavaVM=${{ matrix.vm }} \
              "-Porg.gradle.java.installations.paths=${{ steps.setup-test-java.outputs.path }}" \
              "-Porg.gradle.java.installations.auto-download=false"
            if [ $? -eq 0 ]; then
              echo "Test run $i completed successfully"
            else
              echo "Test run $i failed"
              exit 1
            fi
          done
          echo "All 50 test runs completed successfully"
