name: Build (common)

on:
  workflow_call:
    inputs:
      no-build-cache:
        type: boolean
        required: false

env:
  EXPORTER_VERSION: 1.1.0 # to be updated with the latest version

jobs:
  spotless:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK for running Gradle
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Spotless
        run: ./gradlew spotlessCheck ${{ inputs.no-build-cache && '--no-build-cache' || '' }}

  gradle-wrapper-validation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: gradle/actions/wrapper-validation@v4.4.0

  license-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK for running Gradle
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Using a local standalone exporter dependency?
        if: ${{ hashFiles('azure-monitor-opentelemetry-autoconfigure-1.0.0-beta.*.jar') != '' }}
        run: |
          echo "exporter_version: ${{ env.EXPORTER_VERSION }}"
          mvn -version
          mvn install:install-file -Dfile="azure-monitor-opentelemetry-autoconfigure-${{ env.EXPORTER_VERSION }}.jar" -DpomFile="azure-monitor-opentelemetry-autoconfigure-${{ env.EXPORTER_VERSION }}.pom" -DgroupId="com.azure" -DartifactId="azure-monitor-opentelemetry-autoconfigure" -Dversion="${{ env.EXPORTER_VERSION }}"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Generate license report
        run: |
          # generateLicenseReport build caching appears to be broken so need to ignore build cache always
          ./gradlew generateLicenseReport --no-build-cache

      - name: Check licenses
        run: |
          # add any untracked folders that may have been added by generateLicenseReport
          git add licenses
          # there's always going to one line difference due to the timestamp included in the report
          if [[ $(git diff --cached --shortstat licenses) == " 1 file changed, 1 insertion(+), 1 deletion(-)" ]]
          then
            echo "Licenses are up-to-date."
          else
            echo "Licenses are not up-to-date, please run './gradlew generateLicenseReport' locally and commit."
            echo
            echo "$(git diff --cached --stat licenses)"
            echo
            echo "$(git diff --cached licenses)"
            exit 1
          fi

  assemble:
    # running (and uploading artifact) from windows since only that build includes etw
    runs-on: windows-2022
    steps:
      - name: Support long paths
        run: git config --system core.longpaths true

      - uses: actions/checkout@v4

      - name: Set up JDK for running Gradle
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Using a local standalone exporter dependency?
        if: ${{ hashFiles('azure-monitor-opentelemetry-autoconfigure-1.0.0-beta.*.jar') != '' }}
        run: |
          echo "exporter_version: ${{ env.EXPORTER_VERSION }}"
          mvn -version
          mvn install:install-file -Dfile="azure-monitor-opentelemetry-autoconfigure-${{ env.EXPORTER_VERSION }}.jar" -DpomFile="azure-monitor-opentelemetry-autoconfigure-${{ env.EXPORTER_VERSION }}.pom" -DgroupId="com.azure" -DartifactId="azure-monitor-opentelemetry-autoconfigure" -Dversion="${{ env.EXPORTER_VERSION }}"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Setup Visual Studio and Windows SDK environment
        shell: cmd
        run: |
          "%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath > vs.txt
          set /p VSPATH=<vs.txt
          echo APPINSIGHTS_VS_PATH=%VSPATH%>>%GITHUB_ENV%
          echo APPINSIGHTS_WIN10_SDK_PATH=C:\Program Files (x86)\Windows Kits\10>>%GITHUB_ENV%

      - name: Assemble
        # javadoc task fails sporadically fetching https://docs.oracle.com/javase/8/docs/api/
        run: >
          ./gradlew assemble
          "-Dai.etw.native.build=release"
          -x javadoc
          ${{ inputs.no-build-cache && '--no-build-cache' || '' }}

      - name: Upload snapshot
        uses: actions/upload-artifact@v4
        with:
          path: agent/agent/build/libs/applicationinsights-agent-*-SNAPSHOT.jar

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        test-java-version:
          - 8
          - 11
          - 17
          - 21
          - 23
        vm:
          - hotspot
          # TODO (trask) enable once profiler supports OpenJ9
          # - openj9
        os:
          - windows-2022
          - ubuntu-latest
      fail-fast: false
    steps:
      - name: Support long paths
        run: git config --system core.longpaths true
        if: matrix.os == 'windows-2022'

      - uses: actions/checkout@v4

      - id: setup-test-java
        name: Set up JDK ${{ matrix.test-java-version }}-${{ matrix.vm }} for running tests
        uses: actions/setup-java@v4
        with:
          distribution: ${{ matrix.vm == 'hotspot' && 'temurin' || 'adopt-openj9'}}
          java-version: ${{ matrix.test-java-version }}

      - name: Set up JDK for running Gradle
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Using a local standalone exporter dependency?
        if: ${{ hashFiles('azure-monitor-opentelemetry-autoconfigure-1.0.0-beta.*.jar') != '' }}
        run: |
          echo "exporter_version: ${{ env.EXPORTER_VERSION }}"
          mvn -version
          mvn install:install-file -Dfile="azure-monitor-opentelemetry-autoconfigure-${{ env.EXPORTER_VERSION }}.jar" -DpomFile="azure-monitor-opentelemetry-autoconfigure-${{ env.EXPORTER_VERSION }}.pom" -DgroupId="com.azure" -DartifactId="azure-monitor-opentelemetry-autoconfigure" -Dversion="${{ env.EXPORTER_VERSION }}"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Test
        # spotless is checked separately since it's a common source of failure
        run: >
          ./gradlew
          check
          -x spotlessCheck
          -PtestJavaVersion=${{ matrix.test-java-version }}
          -PtestJavaVM=${{ matrix.vm }}
          "-Porg.gradle.java.installations.paths=${{ steps.setup-test-java.outputs.path }}"
          "-Porg.gradle.java.installations.auto-download=false"
          ${{ inputs.no-build-cache && ' --no-build-cache' || '' }}

  setup-smoke-test-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - id: set-matrix
        run: |
          json_array=$(
            for dir in smoke-tests/apps/*; do
              # Convert directory path to module name (e.g., "smoke-tests/apps/MyApp" -> "smoke-tests:apps:MyApp")
              module=$(echo "$dir" | sed 's|/|:|g')
              # Extract just the app name from the module path (e.g., "smoke-tests:apps:MyApp" -> "MyApp")
              module_short=$(echo "$module" | sed 's|.*:||')
              
              find "${dir}/src/smokeTest/java" -name "*Test.java" | \
                # Remove the base path to get relative path from smokeTest/java
                sed "s|${dir}/src/smokeTest/java/||" | \
                # Convert file name to class name (e.g., "com/example/MyTest.java" -> "com.example.MyTest")
                sed 's|/|.|g' | sed 's|\.java$||' | \
                # Process each fully qualified test class name
                while read -r class_name; do
                  # Extract just the simple class name (e.g., "com.example.MyTest" -> "MyTest")
                  class_short=$(echo "$class_name" | sed 's/.*\.//')
                  echo "{\"display\":\"${module_short}:${class_short}\"," \
                        "\"module\":\"${module}\"," \
                        "\"test_class\":\"${class_name}\"}"
                done
            # Join all JSON objects with commas and remove trailing comma
            done | tr '\n' ',' | sed 's/,$//'
          )
          
          # Output the matrix in GitHub Actions format
          echo "matrix={\"include\":[$json_array]}" >> $GITHUB_OUTPUT

  smoke-test:
    name: ${{ matrix.display }}
    needs: setup-smoke-test-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.setup-smoke-test-matrix.outputs.matrix)}}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Using a local standalone exporter dependency?
        if: ${{ hashFiles('azure-monitor-opentelemetry-autoconfigure-1.0.0-beta.*.jar') != '' }}
        run: |
          echo "exporter_version: ${{ env.EXPORTER_VERSION }}"
          mvn -version
          mvn install:install-file -Dfile="azure-monitor-opentelemetry-autoconfigure-${{ env.EXPORTER_VERSION }}.jar" -DpomFile="azure-monitor-opentelemetry-autoconfigure-${{ env.EXPORTER_VERSION }}.pom" -DgroupId="com.azure" -DartifactId="azure-monitor-opentelemetry-autoconfigure" -Dversion="${{ env.EXPORTER_VERSION }}"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Test
        run: ./gradlew ${{ matrix.module }}:smokeTest --tests "${{ matrix.test_class }}*"

      - name: Create unique artifact name
        if: failure()
        run: |
          # Create a unique name based on module and test class
          artifact_name="${{ matrix.module }}:${{ matrix.test_class }}"
          # Replace colons and dots with hyphens for valid artifact names
          artifact_name=$(echo "$artifact_name" | sed 's/[:.]/\-/g')
          echo "UPLOAD_ARTIFACT_NAME=$artifact_name" >> $GITHUB_ENV

      - name: Upload smoke test reports
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: ${{ env.UPLOAD_ARTIFACT_NAME }}
          path: '**/build/reports/tests/smokeTest/**/*'
