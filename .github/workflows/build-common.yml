name: Build (common)

on:
  workflow_call:
    inputs:
      no-build-cache:
        type: boolean
        required: false

env:
  EXPORTER_VERSION: 1.1.0 # to be updated with the latest version

jobs:
  spotless:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK for running Gradle
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Spotless
        run: ./gradlew spotlessCheck ${{ inputs.no-build-cache && '--no-build-cache' || '' }}

  gradle-wrapper-validation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: gradle/actions/wrapper-validation@v4.4.0

  license-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK for running Gradle
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Using a local standalone exporter dependency?
        if: ${{ hashFiles('azure-monitor-opentelemetry-autoconfigure-1.0.0-beta.*.jar') != '' }}
        run: |
          echo "exporter_version: ${{ env.EXPORTER_VERSION }}"
          mvn -version
          mvn install:install-file -Dfile="azure-monitor-opentelemetry-autoconfigure-${{ env.EXPORTER_VERSION }}.jar" -DpomFile="azure-monitor-opentelemetry-autoconfigure-${{ env.EXPORTER_VERSION }}.pom" -DgroupId="com.azure" -DartifactId="azure-monitor-opentelemetry-autoconfigure" -Dversion="${{ env.EXPORTER_VERSION }}"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Generate license report
        run: |
          # generateLicenseReport build caching appears to be broken so need to ignore build cache always
          ./gradlew generateLicenseReport --no-build-cache

      - name: Check licenses
        run: |
          # add any untracked folders that may have been added by generateLicenseReport
          git add licenses
          # there's always going to one line difference due to the timestamp included in the report
          if [[ $(git diff --cached --shortstat licenses) == " 1 file changed, 1 insertion(+), 1 deletion(-)" ]]
          then
            echo "Licenses are up-to-date."
          else
            echo "Licenses are not up-to-date, please run './gradlew generateLicenseReport' locally and commit."
            echo
            echo "$(git diff --cached --stat licenses)"
            echo
            echo "$(git diff --cached licenses)"
            exit 1
          fi

  assemble:
    # running (and uploading artifact) from windows since only that build includes etw
    runs-on: windows-2019
    steps:
      - name: Support long paths
        run: git config --system core.longpaths true

      - uses: actions/checkout@v4

      - name: Set up JDK for running Gradle
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Using a local standalone exporter dependency?
        if: ${{ hashFiles('azure-monitor-opentelemetry-autoconfigure-1.0.0-beta.*.jar') != '' }}
        run: |
          echo "exporter_version: ${{ env.EXPORTER_VERSION }}"
          mvn -version
          mvn install:install-file -Dfile="azure-monitor-opentelemetry-autoconfigure-${{ env.EXPORTER_VERSION }}.jar" -DpomFile="azure-monitor-opentelemetry-autoconfigure-${{ env.EXPORTER_VERSION }}.pom" -DgroupId="com.azure" -DartifactId="azure-monitor-opentelemetry-autoconfigure" -Dversion="${{ env.EXPORTER_VERSION }}"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Assemble
        # javadoc task fails sporadically fetching https://docs.oracle.com/javase/8/docs/api/
        run: >
          ./gradlew assemble
          "-Dai.etw.native.build=release"
          -x javadoc
          ${{ inputs.no-build-cache && '--no-build-cache' || '' }}

      - name: Upload snapshot
        uses: actions/upload-artifact@v4
        with:
          path: agent/agent/build/libs/applicationinsights-agent-*-SNAPSHOT.jar

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        test-java-version:
          - 8
          - 11
          - 17
          - 21
          - 23
        vm:
          - hotspot
          # TODO (trask) enable once profiler supports OpenJ9
          # - openj9
        os:
          - windows-2019
          - ubuntu-latest
      fail-fast: false
    steps:
      - name: Support long paths
        run: git config --system core.longpaths true
        if: matrix.os == 'windows-2019'

      - uses: actions/checkout@v4

      - id: setup-test-java
        name: Set up JDK ${{ matrix.test-java-version }}-${{ matrix.vm }} for running tests
        uses: actions/setup-java@v4
        with:
          distribution: ${{ matrix.vm == 'hotspot' && 'temurin' || 'adopt-openj9'}}
          java-version: ${{ matrix.test-java-version }}

      - name: Set up JDK for running Gradle
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Using a local standalone exporter dependency?
        if: ${{ hashFiles('azure-monitor-opentelemetry-autoconfigure-1.0.0-beta.*.jar') != '' }}
        run: |
          echo "exporter_version: ${{ env.EXPORTER_VERSION }}"
          mvn -version
          mvn install:install-file -Dfile="azure-monitor-opentelemetry-autoconfigure-${{ env.EXPORTER_VERSION }}.jar" -DpomFile="azure-monitor-opentelemetry-autoconfigure-${{ env.EXPORTER_VERSION }}.pom" -DgroupId="com.azure" -DartifactId="azure-monitor-opentelemetry-autoconfigure" -Dversion="${{ env.EXPORTER_VERSION }}"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Test
        # spotless is checked separately since it's a common source of failure
        run: >
          ./gradlew
          check
          -x spotlessCheck
          -PtestJavaVersion=${{ matrix.test-java-version }}
          -PtestJavaVM=${{ matrix.vm }}
          "-Porg.gradle.java.installations.paths=${{ steps.setup-test-java.outputs.path }}"
          "-Porg.gradle.java.installations.auto-download=false"
          ${{ inputs.no-build-cache && ' --no-build-cache' || '' }}

  setup-smoke-test-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - id: set-matrix
        run: |
          modules=$(ls -d smoke-tests/apps/* | sed 's/\/$//' | sed 's/\//:/g' | sed 's/^/:/')
          inner_json=$(echo $modules | xargs echo | sed 's/ /","/g')
          echo "matrix={\"module\":[\"$inner_json\"]}" >> $GITHUB_OUTPUT

  smoke-test:
    needs: setup-smoke-test-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.setup-smoke-test-matrix.outputs.matrix)}}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Using a local standalone exporter dependency?
        if: ${{ hashFiles('azure-monitor-opentelemetry-autoconfigure-1.0.0-beta.*.jar') != '' }}
        run: |
          echo "exporter_version: ${{ env.EXPORTER_VERSION }}"
          mvn -version
          mvn install:install-file -Dfile="azure-monitor-opentelemetry-autoconfigure-${{ env.EXPORTER_VERSION }}.jar" -DpomFile="azure-monitor-opentelemetry-autoconfigure-${{ env.EXPORTER_VERSION }}.pom" -DgroupId="com.azure" -DartifactId="azure-monitor-opentelemetry-autoconfigure" -Dversion="${{ env.EXPORTER_VERSION }}"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Test
        run: ./gradlew ${{ matrix.module }}:smokeTest

      - name: Create unique artifact name
        if: failure()
        run: |
          echo "UPLOAD_ARTIFACT_NAME=${{ matrix.module }}" | sed 's/:/-/g' >> $GITHUB_ENV

      - name: Upload smoke test reports
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: ${{ env.UPLOAD_ARTIFACT_NAME }}
          path: '**/build/reports/tests/smokeTest/**/*'
